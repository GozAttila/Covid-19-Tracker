[{"E:\\Projects\\covid-19-tracker\\src\\index.js":"1","E:\\Projects\\covid-19-tracker\\src\\reportWebVitals.js":"2","E:\\Projects\\covid-19-tracker\\src\\App.js":"3","E:\\Projects\\covid-19-tracker\\src\\components\\Header\\Header.js":"4","E:\\Projects\\covid-19-tracker\\src\\components\\MapList\\MapList.js":"5","E:\\Projects\\covid-19-tracker\\src\\components\\Diagram\\Diagram.js":"6","E:\\Projects\\covid-19-tracker\\src\\components\\Graph\\Graph.js":"7","E:\\Projects\\covid-19-tracker\\src\\components\\ButtonList\\ButtonList.js":"8","E:\\Projects\\covid-19-tracker\\src\\components\\TopButtons\\TopButtons.js":"9","E:\\Projects\\covid-19-tracker\\src\\components\\CaseTypeButton\\CaseTypeButton.js":"10","E:\\Projects\\covid-19-tracker\\src\\components\\WorldMap\\WorldMap.js":"11","E:\\Projects\\covid-19-tracker\\src\\components\\CountryList\\CountryList.js":"12","E:\\Projects\\covid-19-tracker\\src\\components\\Tooltip\\Tooltip.js":"13","E:\\Projects\\covid-19-tracker\\src\\components\\Footer\\Footer.js":"14","E:\\Projects\\covid-19-tracker\\src\\components\\InfoModal\\InfoModal.js":"15"},{"size":500,"mtime":499162500000,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":1122,"mtime":1610775903471,"results":"19","hashOfConfig":"17"},{"size":511,"mtime":1610775963725,"results":"20","hashOfConfig":"17"},{"size":2072,"mtime":1610740145050,"results":"21","hashOfConfig":"17"},{"size":3805,"mtime":1610741401112,"results":"22","hashOfConfig":"17"},{"size":4625,"mtime":1610740384576,"results":"23","hashOfConfig":"17"},{"size":638,"mtime":1610699420607,"results":"24","hashOfConfig":"17"},{"size":1256,"mtime":1610714264414,"results":"25","hashOfConfig":"17"},{"size":369,"mtime":1610699748711,"results":"26","hashOfConfig":"17"},{"size":8612,"mtime":1610733216309,"results":"27","hashOfConfig":"17"},{"size":1219,"mtime":1610723964366,"results":"28","hashOfConfig":"17"},{"size":1420,"mtime":1610724687988,"results":"29","hashOfConfig":"17"},{"size":596,"mtime":1610776701533,"results":"30","hashOfConfig":"17"},{"size":2100,"mtime":1610776492773,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pvgax9",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Projects\\covid-19-tracker\\src\\index.js",[],"E:\\Projects\\covid-19-tracker\\src\\reportWebVitals.js",[],"E:\\Projects\\covid-19-tracker\\src\\App.js",[],"E:\\Projects\\covid-19-tracker\\src\\components\\Header\\Header.js",[],"E:\\Projects\\covid-19-tracker\\src\\components\\MapList\\MapList.js",[],["66","67"],"E:\\Projects\\covid-19-tracker\\src\\components\\Diagram\\Diagram.js",["68"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport \"./Diagram.css\";\r\n\r\nimport ButtonList from \"../ButtonList/ButtonList\";\r\nimport Graph from \"../Graph/Graph\";\r\n\r\nfunction Diagram({ countryCode }) {\r\n  const [graphData, setGraphData] = useState({});\r\n  const [loadingState, setLoadingState] = useState(false);\r\n  const [noDataState, setNoDataState] = useState(false);\r\n\r\n  const basicButtonStatus = {\r\n    cases: true,\r\n    active: true,\r\n    recovered: true,\r\n    deaths: true,\r\n  };\r\n\r\n  const [buttonStatus, setButtonStatus] = useState(basicButtonStatus);\r\n\r\n  const caseTypeButtonList = [\r\n    {\r\n      caseType: \"cases\",\r\n      buttonName: \"All cases\",\r\n      isActive: buttonStatus.cases,\r\n    },\r\n    {\r\n      caseType: \"active\",\r\n      buttonName: \"Active cases\",\r\n      isActive: buttonStatus.active,\r\n    },\r\n    {\r\n      caseType: \"recovered\",\r\n      buttonName: \"Recovered\",\r\n      isActive: buttonStatus.recovered,\r\n    },\r\n    {\r\n      caseType: \"deaths\",\r\n      buttonName: \"Deaths\",\r\n      isActive: buttonStatus.deaths,\r\n    },\r\n  ];\r\n\r\n  const calculateDays = () => {\r\n    const today = new Date();\r\n    const covidStartDay = new Date(\"2020-01-22\");\r\n    return Math.floor(\r\n      (today.getTime() - covidStartDay.getTime()) / (1000 * 60 * 60 * 24)\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoadingState(true);\r\n    setNoDataState(false);\r\n    const getHistoricalData = () => {\r\n      const url = `https://disease.sh/v3/covid-19/historical/${\r\n        countryCode === \"Worldwide\" ? \"all\" : countryCode\r\n      }?lastdays=${calculateDays()}`;\r\n      fetch(url)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (\r\n            data.message !==\r\n            \"Country not found or doesn't have any historical data\"\r\n          ) {\r\n            setGraphData(\r\n              organizeGraphData(\r\n                countryCode === \"Worldwide\" ? data : data.timeline\r\n              )\r\n            );\r\n          } else {\r\n            setNoDataState(true);\r\n          }\r\n          setButtonStatus(basicButtonStatus);\r\n          setLoadingState(false);\r\n        });\r\n    };\r\n\r\n    getHistoricalData();\r\n  }, [countryCode]);\r\n\r\n  const organizeGraphData = (data) => {\r\n    let organizedData = [];\r\n    const date = Object.keys(data.cases);\r\n    const cases = Object.values(data.cases);\r\n    const recovered = Object.values(data.recovered);\r\n    const deaths = Object.values(data.deaths);\r\n\r\n    for (let i = 0; i < date.length; i++) {\r\n      let activeCases = cases[i] - recovered[i] - deaths[i];\r\n\r\n      organizedData.push({\r\n        date: new Date(date[i]),\r\n        cases: cases[i],\r\n        active: activeCases,\r\n        recovered: recovered[i],\r\n        deaths: deaths[i],\r\n      });\r\n    }\r\n    return organizedData;\r\n  };\r\n\r\n  const buttonHandler = (buttonCaseType) => {\r\n    setButtonStatus({\r\n      ...buttonStatus,\r\n      [buttonCaseType]: !buttonStatus[buttonCaseType],\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"diagram\">\r\n      <div className=\"diagram__container\">\r\n        {loadingState ? (\r\n          <h2 className=\"loading diagram__loading\">Loading...</h2>\r\n        ) : noDataState ? (\r\n          <div className=\"loading diagram__loading warning\">\r\n            No historical data found\r\n            <br />\r\n            Please, check the info\r\n          </div>\r\n        ) : (\r\n          <Graph\r\n            className=\"diagram__graph\"\r\n            graphData={graphData}\r\n            buttonStatus={buttonStatus}\r\n          />\r\n        )}\r\n\r\n        <div className=\"diagram__buttons\">\r\n          <ButtonList\r\n            caseTypeButtonList={caseTypeButtonList}\r\n            buttonHandler={buttonHandler}\r\n            buttonType=\"sideButton\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Diagram;\r\n","E:\\Projects\\covid-19-tracker\\src\\components\\Graph\\Graph.js",["69","70","71","72"],"import React, { useEffect } from \"react\";\r\n\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\n\r\nimport \"./Graph.css\";\r\n\r\nconst { useRef } = React;\r\n\r\nfunction Graph({ graphData, buttonStatus }) {\r\n  const chartRef = useRef(null);\r\n\r\n  const casesColor = am4core.color(\"#1c5fe5\");\r\n  const activeColor = am4core.color(\"#ff8726\");\r\n  const recoveredColor = am4core.color(\"#45d21a\");\r\n  const deathsColor = am4core.color(\"#d21a1a\");\r\n\r\n  const colors = {\r\n    cases: casesColor,\r\n    active: activeColor,\r\n    recovered: recoveredColor,\r\n    deaths: deathsColor,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!chartRef.current) {\r\n      am4core.useTheme(am4themes_animated);\r\n\r\n      chartRef.current = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n\r\n      chartRef.current.height = am4core.percent(95);\r\n      chartRef.current.width = am4core.percent(99);\r\n\r\n      const dateAxis = chartRef.current.xAxes.push(new am4charts.DateAxis());\r\n      dateAxis.renderer.grid.template.location = 0;\r\n      dateAxis.renderer.grid.template.stroke = am4core.color(\"#eeeeee\");\r\n      dateAxis.renderer.labels.template.fill = am4core.color(\"#f16d25\");\r\n\r\n      const valueAxis = chartRef.current.yAxes.push(new am4charts.ValueAxis());\r\n      valueAxis.tooltip.disabled = true;\r\n      valueAxis.renderer.grid.template.stroke = am4core.color(\"#eeeeee\");\r\n      valueAxis.renderer.labels.template.fill = am4core.color(\"#f16d25\");\r\n\r\n      chartRef.current.data = graphData;\r\n\r\n      const seriesList = {\r\n        caseSeries: {\r\n          name: \"cases\",\r\n          text: \"All cases\",\r\n        },\r\n        activeSeries: {\r\n          name: \"active\",\r\n          text: \"Active cases\",\r\n        },\r\n        recoveredSeries: {\r\n          name: \"recovered\",\r\n          text: \"Recovered\",\r\n        },\r\n        deathsSeries: {\r\n          name: \"deaths\",\r\n          text: \"Deaths\",\r\n        },\r\n      };\r\n\r\n      const createSeries = (data) => {\r\n        const series = chartRef.current.series.push(new am4charts.LineSeries());\r\n        series.name = data.text;\r\n        series.dataFields.dateX = \"date\";\r\n        series.dataFields.valueY = data.name;\r\n        series.tooltipText = \"{valueY.value}\";\r\n        series.fill = colors[data.name];\r\n        series.stroke = colors[data.name];\r\n        return series;\r\n      };\r\n\r\n      const caseSeries = createSeries(seriesList.caseSeries);\r\n      const activeSeries = createSeries(seriesList.activeSeries);\r\n      const recoveredSeries = createSeries(seriesList.recoveredSeries);\r\n      const deathsSeries = createSeries(seriesList.deathsSeries);\r\n\r\n      chartRef.current.cursor = new am4charts.XYCursor();\r\n      chartRef.current.cursor.XAxis = dateAxis;\r\n\r\n      const scrollbarX = new am4charts.XYChartScrollbar();\r\n      scrollbarX.series.push(caseSeries);\r\n      chartRef.current.scrollbarX = scrollbarX;\r\n      chartRef.current.scrollbarX.minHeight = 20;\r\n      chartRef.current.scrollbarX.showSystemTooltip = false;\r\n      chartRef.current.scrollbarX.thumb.showSystemTooltip = false;\r\n      chartRef.current.scrollbarX.startGrip.showSystemTooltip = false;\r\n      chartRef.current.scrollbarX.endGrip.showSystemTooltip = false;\r\n      chartRef.current.scrollbarX.unselectedOverlay.fill = am4core.color(\r\n        \"#222222\"\r\n      );\r\n      chartRef.current.scrollbarX.unselectedOverlay.fillOpacity = 0.8;\r\n\r\n      const scrollAxis = chartRef.current.scrollbarX.scrollbarChart.xAxes.getIndex(\r\n        0\r\n      );\r\n      scrollAxis.renderer.labels.template.disabled = true;\r\n      scrollAxis.renderer.grid.template.disabled = true;\r\n\r\n      chartRef.current.legend = new am4charts.Legend();\r\n      chartRef.current.legend.parent = chartRef.current.plotContainer;\r\n      chartRef.current.legend.zIndex = 100;\r\n      chartRef.current.legend.labels.template.fill = am4core.color(\"#e9e9e9\");\r\n\r\n      dateAxis.renderer.grid.template.strokeOpacity = 0.07;\r\n      valueAxis.renderer.grid.template.strokeOpacity = 0.07;\r\n    }\r\n\r\n    return () => {\r\n      chartRef.current && chartRef.current.dispose();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let chart = chartRef.current.series;\r\n    buttonStatus.cases ? chart.values[0].show() : chart.values[0].hide();\r\n    buttonStatus.active ? chart.values[1].show() : chart.values[1].hide();\r\n    buttonStatus.recovered ? chart.values[2].show() : chart.values[2].hide();\r\n    buttonStatus.deaths ? chart.values[3].show() : chart.values[3].hide();\r\n  }, [buttonStatus]);\r\n\r\n  return <div id=\"chartdiv\"></div>;\r\n}\r\n\r\nexport default Graph;\r\n","E:\\Projects\\covid-19-tracker\\src\\components\\ButtonList\\ButtonList.js",[],"E:\\Projects\\covid-19-tracker\\src\\components\\TopButtons\\TopButtons.js",[],"E:\\Projects\\covid-19-tracker\\src\\components\\CaseTypeButton\\CaseTypeButton.js",[],"E:\\Projects\\covid-19-tracker\\src\\components\\WorldMap\\WorldMap.js",["73","74","75","76","77"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\r\n\r\nimport \"./WorldMap.css\";\r\n\r\nimport Tooltip from \"../Tooltip/Tooltip\";\r\n\r\nconst { useRef } = React;\r\n\r\nfunction WorldMap({\r\n  worldData,\r\n  mapCountries,\r\n  caseType,\r\n  perCapita,\r\n  countryCodeCallBack,\r\n}) {\r\n  const worldMapRef = useRef(null);\r\n\r\n  const worldInfo = {\r\n    flag:\r\n      \"https://images.squarespace-cdn.com/content/v1/5506acb1e4b0b39d3c22d329/1430773739856-CGYOUJP6S653W4B13HVY/ke17ZwdGBToddI8pDm48kGwkjuynw4B8tYYHsellrnlZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZUJFbgE-7XRK3dMEBRBhUpxHD-n7kw2ta02ApS8KVYqRgwdRjd54i2ObM4fy-YBd1g4Ns4l_SJho4nLemRk_BII/image-asset.jpeg?format=500w\",\r\n    country: \"Worldwide\",\r\n    cases: worldData.cases,\r\n    active: worldData.active,\r\n    recovered: worldData.recovered,\r\n    deaths: worldData.deaths,\r\n    population: worldData.population,\r\n  };\r\n\r\n  const [tooltipData, setTooltipData] = useState(worldInfo);\r\n\r\n  const casesColor = am4core.color(\"#1c5fe5\");\r\n  const activeColor = am4core.color(\"#ff8726\");\r\n  const recoveredColor = am4core.color(\"#45d21a\");\r\n  const deathsColor = am4core.color(\"#d21a1a\");\r\n  const countryColor = am4core.color(\"#3b3b3b\");\r\n  const countryStrokeColor = am4core.color(\"#000000\");\r\n\r\n  const colors = {\r\n    cases: casesColor,\r\n    active: activeColor,\r\n    recovered: recoveredColor,\r\n    deaths: deathsColor,\r\n  };\r\n\r\n  let outOfCountries = false;\r\n  let countryLocked = false;\r\n  let currentPolygon = undefined;\r\n\r\n  useEffect(() => {\r\n    if (!worldMapRef.current) {\r\n      am4core.useTheme(am4themes_animated);\r\n\r\n      worldMapRef.current = am4core.create(\"map\", am4maps.MapChart);\r\n      worldMapRef.current.geodata = am4geodata_worldLow;\r\n      worldMapRef.current.projection = new am4maps.projections.Miller();\r\n      worldMapRef.current.height = am4core.percent(90);\r\n      worldMapRef.current.deltaLongitude = -10;\r\n      worldMapRef.current.homeGeoPoint = { longitude: -30, latitude: 30 };\r\n\r\n      // to avoid instant update\r\n      worldMapRef.current.dummyData = false;\r\n\r\n      let polygonSeries = worldMapRef.current.series.push(\r\n        new am4maps.MapPolygonSeries()\r\n      );\r\n\r\n      polygonSeries.heatRules.push({\r\n        property: \"fill\",\r\n        target: polygonSeries.mapPolygons.template,\r\n        min: countryColor,\r\n        max: casesColor,\r\n      });\r\n\r\n      polygonSeries.useGeodata = true;\r\n      polygonSeries.exclude = [\"AQ\"];\r\n      polygonSeries.calculateVisualCenter = true;\r\n\r\n      let polygonSeriesData = [];\r\n      if (polygonSeriesData.length === 0) {\r\n        mapCountries.map((country) => {\r\n          polygonSeriesData.push({\r\n            id: country.countryInfo.iso2,\r\n            country: country.country,\r\n            flag: country.countryInfo.flag,\r\n            value: country[\"cases\"], // this is the source of the data value, currently showed value\r\n            cases: country[\"cases\"], // this is just a stored value\r\n            active: country[\"active\"],\r\n            recovered: country[\"recovered\"],\r\n            deaths: country[\"deaths\"],\r\n            population: country[\"population\"],\r\n          });\r\n        });\r\n        polygonSeries.data = polygonSeriesData;\r\n      }\r\n\r\n      let polygonTemplate = polygonSeries.mapPolygons.template;\r\n      polygonTemplate.tooltipText = \"{name}\";\r\n      polygonTemplate.fill = countryColor;\r\n      polygonTemplate.fillOpacity = 1;\r\n      polygonTemplate.stroke = countryStrokeColor;\r\n      polygonTemplate.strokeOpacity = 0.15;\r\n      polygonTemplate.setStateOnChildren = true;\r\n      polygonTemplate.tooltipPosition = \"fixed\";\r\n\r\n      let polygonHoverState = polygonTemplate.states.create(\"hover\");\r\n      polygonHoverState.transitionEasing = am4core.ease.elasticInOut;\r\n      polygonHoverState.properties.stroke = am4core.color(\"#ffffff\");\r\n      polygonHoverState.properties.strokeOpacity = 0.65;\r\n\r\n      let polygonActiveState = polygonTemplate.states.create(\"active\");\r\n      polygonActiveState.transitionEasing = am4core.ease.elasticInOut;\r\n      polygonActiveState.properties.stroke = am4core.color(\"#dd17cc\");\r\n      polygonActiveState.properties.strokeOpacity = 0.85;\r\n\r\n      polygonTemplate.events.on(\"hit\", handleCountryHit);\r\n      polygonTemplate.events.on(\"over\", handleCountryOver);\r\n      polygonTemplate.events.on(\"out\", handleCountryOut);\r\n\r\n      function handleCountryHit(event) {\r\n        selectCountry(event.target);\r\n      }\r\n\r\n      function handleCountryOver(event) {\r\n        rollOverCountry(event.target);\r\n      }\r\n\r\n      function handleCountryOut() {\r\n        outOfCountries = true;\r\n        const changeToWorldInfo = () => {\r\n          if (outOfCountries) {\r\n            setTooltipData(worldInfo);\r\n          }\r\n        };\r\n        if (!countryLocked) {\r\n          setTimeout(() => {\r\n            changeToWorldInfo();\r\n          }, 200);\r\n        }\r\n      }\r\n\r\n      const rollOverCountry = (mapPolygon) => {\r\n        outOfCountries = false;\r\n        if (!countryLocked) {\r\n          if (mapPolygon.dataItem.dataContext.madeFromGeoData === true) {\r\n            setTooltipData({\r\n              flag: `https://www.countryflags.io/${mapPolygon.dataItem.dataContext.id}/flat/64.png`,\r\n              country: mapPolygon.dataItem.dataContext.name,\r\n              cases: \"N/A\",\r\n              active: \"N/A\",\r\n              recovered: \"N/A\",\r\n              deaths: \"N/A\",\r\n              population: \"N/A\",\r\n            });\r\n          } else {\r\n            tooltipChange(mapPolygon);\r\n          }\r\n        }\r\n      };\r\n\r\n      const tooltipChange = (mapPolygon) => {\r\n        setTooltipData({\r\n          flag: mapPolygon.dataItem.dataContext.flag,\r\n          country: mapPolygon.dataItem.dataContext.country,\r\n          cases: mapPolygon.dataItem.dataContext.cases,\r\n          active: mapPolygon.dataItem.dataContext.active,\r\n          recovered: mapPolygon.dataItem.dataContext.recovered,\r\n          deaths: mapPolygon.dataItem.dataContext.deaths,\r\n          population: mapPolygon.dataItem.dataContext.population,\r\n        });\r\n      };\r\n\r\n      worldMapRef.current.chartContainer.background.interactionsEnabled = true;\r\n\r\n      worldMapRef.current.chartContainer.background.events.on(\r\n        \"hit\",\r\n        function (e) {\r\n          clearSelectedCountry();\r\n        }\r\n      );\r\n\r\n      worldMapRef.current.backgroundSeries.events.on(\"hit\", function (e) {\r\n        clearSelectedCountry();\r\n      });\r\n\r\n      const clearSelectedCountry = () => {\r\n        if (currentPolygon !== undefined) {\r\n          currentPolygon.isActive = false;\r\n          currentPolygon = undefined;\r\n        }\r\n        countryLocked = false;\r\n        if (outOfCountries) {\r\n          setTooltipData(worldInfo);\r\n          countryCodeCallBack(\"Worldwide\");\r\n        }\r\n      };\r\n\r\n      function selectCountry(mapPolygon) {\r\n        if (currentPolygon === mapPolygon) {\r\n          clearSelectedCountry();\r\n          return;\r\n        }\r\n\r\n        currentPolygon = mapPolygon;\r\n\r\n        polygonSeries.mapPolygons.each(function (polygon) {\r\n          polygon.isActive = false;\r\n        });\r\n        currentPolygon.isActive = true;\r\n        countryCodeCallBack(currentPolygon.dataItem.dataContext.id);\r\n        countryLocked = true;\r\n        tooltipChange(mapPolygon);\r\n      }\r\n    }\r\n    return () => {\r\n      worldMapRef.current && worldMapRef.current.dispose();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (worldMapRef.current && worldMapRef.current.dummyData) {\r\n      let maxValue = 0;\r\n      let polygonSeries = worldMapRef.current.series.values[0];\r\n\r\n      polygonSeries.mapPolygons.each(function (item) {\r\n        let newValue = item.dataItem.dataContext[caseType];\r\n        if (perCapita) {\r\n          let population = item.dataItem.dataContext[\"population\"];\r\n\r\n          newValue =\r\n            population === 0\r\n              ? 0\r\n              : Math.round(newValue / (population / 1000000));\r\n        }\r\n\r\n        item.dataItem.value = newValue;\r\n        if (maxValue < newValue) {\r\n          maxValue = newValue;\r\n        }\r\n      });\r\n\r\n      polygonSeries.heatRules.getIndex(0).maxValue = maxValue;\r\n      polygonSeries.heatRules.getIndex(0).max = colors[caseType];\r\n    }\r\n\r\n    worldMapRef.current.dummyData = true;\r\n  }, [caseType, perCapita]);\r\n\r\n  return (\r\n    <>\r\n      <div id=\"map\"></div>\r\n      <Tooltip tooltipData={tooltipData} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default WorldMap;\r\n","E:\\Projects\\covid-19-tracker\\src\\components\\CountryList\\CountryList.js",[],"E:\\Projects\\covid-19-tracker\\src\\components\\Tooltip\\Tooltip.js",[],"E:\\Projects\\covid-19-tracker\\src\\components\\Footer\\Footer.js",[],"E:\\Projects\\covid-19-tracker\\src\\components\\InfoModal\\InfoModal.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":81,"column":6,"nodeType":"84","endLine":81,"endColumn":19,"suggestions":"85"},{"ruleId":"86","severity":1,"message":"87","line":78,"column":13,"nodeType":"88","messageId":"89","endLine":78,"endColumn":25},{"ruleId":"86","severity":1,"message":"90","line":79,"column":13,"nodeType":"88","messageId":"89","endLine":79,"endColumn":28},{"ruleId":"86","severity":1,"message":"91","line":80,"column":13,"nodeType":"88","messageId":"89","endLine":80,"endColumn":25},{"ruleId":"82","severity":1,"message":"92","line":116,"column":6,"nodeType":"84","endLine":116,"endColumn":8,"suggestions":"93"},{"ruleId":"94","severity":1,"message":"95","line":85,"column":36,"nodeType":"96","messageId":"97","endLine":85,"endColumn":38},{"ruleId":"82","severity":1,"message":"98","line":133,"column":26,"nodeType":"99","endLine":133,"endColumn":30},{"ruleId":"82","severity":1,"message":"100","line":193,"column":28,"nodeType":"88","endLine":193,"endColumn":37},{"ruleId":"82","severity":1,"message":"101","line":195,"column":25,"nodeType":"99","endLine":195,"endColumn":30},{"ruleId":"82","severity":1,"message":"102","line":251,"column":6,"nodeType":"84","endLine":251,"endColumn":27,"suggestions":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'basicButtonStatus'. Either include it or remove the dependency array.","ArrayExpression",["106"],"no-unused-vars","'activeSeries' is assigned a value but never used.","Identifier","unusedVar","'recoveredSeries' is assigned a value but never used.","'deathsSeries' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'colors' and 'graphData'. Either include them or remove the dependency array.",["107"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Assignments to the 'outOfCountries' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","Assignments to the 'currentPolygon' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'countryLocked' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useEffect has a missing dependency: 'colors'. Either include it or remove the dependency array.",["108"],"no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},"Update the dependencies array to be: [basicButtonStatus, countryCode]",{"range":"115","text":"116"},"Update the dependencies array to be: [colors, graphData]",{"range":"117","text":"118"},"Update the dependencies array to be: [caseType, colors, perCapita]",{"range":"119","text":"120"},[2160,2173],"[basicButtonStatus, countryCode]",[4158,4160],"[colors, graphData]",[8446,8467],"[caseType, colors, perCapita]"]